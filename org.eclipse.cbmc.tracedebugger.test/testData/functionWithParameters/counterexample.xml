<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2014 Rapicorp, Inc and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        Rapicorp, Inc - initial API and implementation
 -->

<cprover>
<program>CBMC 4.9</program>
<message type="STATUS-MESSAGE">
  <text>CBMC version 4.9 64-bit linux</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Parsing functionWithParameters.c</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Converting</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Type-checking function</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Generating GOTO Program</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Adding CPROVER library</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Function Pointer Removal</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Partial Inlining</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Generic Property Instrumentation</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Starting Bounded Model Checking</text>
</message>

<message type="STATUS-MESSAGE">
  <text>size of program expression: 44 steps</text>
</message>

<message type="STATUS-MESSAGE">
  <text>simple slicing removed 4 assignments</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Generated 1 VCC(s), 1 remaining after simplification</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Passing problem to propositional reduction</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Running propositional reduction</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Post-processing</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Solving with MiniSAT 2.2.0 with simplifier</text>
</message>

<message type="STATUS-MESSAGE">
  <text>330 variables, 491 clauses</text>
</message>

<message type="STATUS-MESSAGE">
  <text>SAT checker: negated claim is SATISFIABLE, i.e., does not hold</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Runtime decision procedure: 0.001s</text>
</message>

<message type="STATUS-MESSAGE">
  <text>Building error trace</text>
</message>

<goto_trace>
  <function_call step_nr="2" thread="0">
    <function display_name="__CPROVER_initialize" identifier="c::__CPROVER_initialize">
      <location file="&lt;built-in-additions&gt;" line="14"/>
    </function>
  </function_call>
  <assignment base_name="__CPROVER_pipe_count" display_name="__CPROVER_pipe_count" identifier="c::__CPROVER_pipe_count" mode="C" step_nr="3" thread="0">
    <location file="&lt;built-in-additions&gt;" line="78"/>
    <type>unsigned int</type>
    <full_lhs>__CPROVER_pipe_count</full_lhs>
    <full_lhs_value>0</full_lhs_value>
    <value>0</value>
    <value_expression>
      <integer binary="00000000000000000000000000000000" c_type="unsigned int" width="32">0</integer>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_thread_id" display_name="__CPROVER_thread_id" identifier="c::__CPROVER_thread_id" mode="C" step_nr="4" thread="0">
    <location file="&lt;built-in-additions&gt;" line="21"/>
    <type>unsigned long int</type>
    <full_lhs>__CPROVER_thread_id</full_lhs>
    <full_lhs_value>0</full_lhs_value>
    <value>0</value>
    <value_expression>
      <integer binary="0000000000000000000000000000000000000000000000000000000000000000" c_type="unsigned long int" width="64">0</integer>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_threads_exited" display_name="__CPROVER_threads_exited" identifier="c::__CPROVER_threads_exited" mode="C" step_nr="5" thread="0">
    <location file="&lt;built-in-additions&gt;" line="22"/>
    <type>_Bool [INFINITY()]</type>
    <full_lhs>__CPROVER_threads_exited</full_lhs>
    <full_lhs_value>__CPROVER_threads_exited#1</full_lhs_value>
    <value>__CPROVER_threads_exited#1</value>
    <value_expression>
      <unknown/>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_next_thread_id" display_name="__CPROVER_next_thread_id" identifier="c::__CPROVER_next_thread_id" mode="C" step_nr="6" thread="0">
    <location file="&lt;built-in-additions&gt;" line="23"/>
    <type>unsigned long int</type>
    <full_lhs>__CPROVER_next_thread_id</full_lhs>
    <full_lhs_value>0</full_lhs_value>
    <value>0</value>
    <value_expression>
      <integer binary="0000000000000000000000000000000000000000000000000000000000000000" c_type="unsigned long int" width="64">0</integer>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_rounding_mode" display_name="__CPROVER_rounding_mode" identifier="c::__CPROVER_rounding_mode" mode="C" step_nr="7" thread="0">
    <location file="&lt;built-in-additions&gt;" line="57"/>
    <type>int</type>
    <full_lhs>__CPROVER_rounding_mode</full_lhs>
    <full_lhs_value>0</full_lhs_value>
    <value>0</value>
    <value_expression>
      <integer binary="00000000000000000000000000000000" c_type="int" width="32">0</integer>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_deallocated" display_name="__CPROVER_deallocated" identifier="c::__CPROVER_deallocated" mode="C" step_nr="8" thread="0">
    <location file="&lt;built-in-additions&gt;" line="30"/>
    <type>void *</type>
    <full_lhs>__CPROVER_deallocated</full_lhs>
    <full_lhs_value>NULL</full_lhs_value>
    <value>NULL</value>
    <value_expression>
      <pointer binary="0000000000000000000000000000000000000000000000000000000000000000"/>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_dead_object" display_name="__CPROVER_dead_object" identifier="c::__CPROVER_dead_object" mode="C" step_nr="9" thread="0">
    <location file="&lt;built-in-additions&gt;" line="31"/>
    <type>void *</type>
    <full_lhs>__CPROVER_dead_object</full_lhs>
    <full_lhs_value>NULL</full_lhs_value>
    <value>NULL</value>
    <value_expression>
      <pointer binary="0000000000000000000000000000000000000000000000000000000000000000"/>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_malloc_object" display_name="__CPROVER_malloc_object" identifier="c::__CPROVER_malloc_object" mode="C" step_nr="10" thread="0">
    <location file="&lt;built-in-additions&gt;" line="32"/>
    <type>void *</type>
    <full_lhs>__CPROVER_malloc_object</full_lhs>
    <full_lhs_value>NULL</full_lhs_value>
    <value>NULL</value>
    <value_expression>
      <pointer binary="0000000000000000000000000000000000000000000000000000000000000000"/>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_malloc_size" display_name="__CPROVER_malloc_size" identifier="c::__CPROVER_malloc_size" mode="C" step_nr="11" thread="0">
    <location file="&lt;built-in-additions&gt;" line="33"/>
    <type>unsigned long int</type>
    <full_lhs>__CPROVER_malloc_size</full_lhs>
    <full_lhs_value>0</full_lhs_value>
    <value>0</value>
    <value_expression>
      <integer binary="0000000000000000000000000000000000000000000000000000000000000000" c_type="unsigned long int" width="64">0</integer>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_malloc_is_new_array" display_name="__CPROVER_malloc_is_new_array" identifier="c::__CPROVER_malloc_is_new_array" mode="C" step_nr="12" thread="0">
    <location file="&lt;built-in-additions&gt;" line="34"/>
    <type>_Bool</type>
    <full_lhs>__CPROVER_malloc_is_new_array</full_lhs>
    <full_lhs_value>FALSE</full_lhs_value>
    <value>FALSE</value>
    <value_expression>
      <boolean binary="0">FALSE</boolean>
    </value_expression>
  </assignment>
  <assignment base_name="__CPROVER_memory_leak" display_name="__CPROVER_memory_leak" identifier="c::__CPROVER_memory_leak" mode="C" step_nr="13" thread="0">
    <location file="&lt;built-in-additions&gt;" line="35"/>
    <type>void *</type>
    <full_lhs>__CPROVER_memory_leak</full_lhs>
    <full_lhs_value>NULL</full_lhs_value>
    <value>NULL</value>
    <value_expression>
      <pointer binary="0000000000000000000000000000000000000000000000000000000000000000"/>
    </value_expression>
  </assignment>
  <function_return step_nr="14" thread="0">
    <function display_name="__CPROVER_initialize" identifier="c::__CPROVER_initialize">
      <location file="&lt;built-in-additions&gt;" line="14"/>
    </function>
  </function_return>
  <assignment base_name="argv'" display_name="c::argv'" identifier="c::argv'" mode="C" step_nr="17" thread="0">
    <type>char *[argc' + 1]</type>
    <full_lhs>argv'[16384]</full_lhs>
    <full_lhs_value>irep("(\"nil\")")[16384]</full_lhs_value>
    <value/>
  </assignment>
  <location-only step_nr="18" thread="0">
    <location file="functionWithParameters.c" line="7"/>
  </location-only>
  <function_call step_nr="19" thread="0">
    <function display_name="main" identifier="c::main">
      <location file="functionWithParameters.c" line="7"/>
    </function>
    <location file="functionWithParameters.c" line="7"/>
  </function_call>
  <assignment base_name="argc" display_name="c::main::argc" identifier="c::main::argc" mode="C" step_nr="20" thread="0">
    <location file="functionWithParameters.c" line="7"/>
    <type>int</type>
    <full_lhs>argc</full_lhs>
    <full_lhs_value>16384</full_lhs_value>
    <value>16384</value>
    <value_expression>
      <integer binary="00000000000000000100000000000000" c_type="int" width="32">16384</integer>
    </value_expression>
  </assignment>
  <assignment base_name="argv" display_name="c::main::argv" identifier="c::main::argv" mode="C" step_nr="21" thread="0">
    <location file="functionWithParameters.c" line="7"/>
    <type>signed char **</type>
    <full_lhs>argv</full_lhs>
    <full_lhs_value>argv'</full_lhs_value>
    <value>argv'</value>
    <value_expression>
      <pointer binary="0000001000000000000000000000000000000000000000000000000000000000"/>
    </value_expression>
  </assignment>
  <assignment base_name="i" display_name="main::1::i" identifier="c::main::1::i" mode="C" step_nr="22" thread="0">
    <location file="functionWithParameters.c" function="main" line="8"/>
    <type>int</type>
    <full_lhs>i</full_lhs>
    <full_lhs_value>0</full_lhs_value>
    <value>0</value>
    <value_expression>
      <integer binary="00000000000000000000000000000000" c_type="int" width="32">0</integer>
    </value_expression>
  </assignment>
  <assignment base_name="i" display_name="main::1::i" identifier="c::main::1::i" mode="C" step_nr="23" thread="0">
    <location file="functionWithParameters.c" function="main" line="8"/>
    <type>int</type>
    <full_lhs>i</full_lhs>
    <full_lhs_value>0</full_lhs_value>
    <value>0</value>
    <value_expression>
      <integer binary="00000000000000000000000000000000" c_type="int" width="32">0</integer>
    </value_expression>
  </assignment>
  <location-only step_nr="24" thread="0">
    <location file="functionWithParameters.c" function="main" line="9"/>
  </location-only>
  <function_call step_nr="25" thread="0">
    <function display_name="my_function" identifier="c::my_function">
      <location file="functionWithParameters.c" line="3"/>
    </function>
    <location file="functionWithParameters.c" function="main" line="9"/>
  </function_call>
  <assignment base_name="my_param" display_name="c::my_function::my_param" identifier="c::my_function::my_param" mode="C" step_nr="26" thread="0">
    <location file="functionWithParameters.c" function="main" line="9"/>
    <type>int</type>
    <full_lhs>my_param</full_lhs>
    <full_lhs_value>1</full_lhs_value>
    <value>1</value>
    <value_expression>
      <integer binary="00000000000000000000000000000001" c_type="int" width="32">1</integer>
    </value_expression>
  </assignment>
  <assignment base_name="my_param" display_name="c::my_function::my_param" identifier="c::my_function::my_param" mode="C" step_nr="27" thread="0">
    <location file="functionWithParameters.c" function="my_function" line="4"/>
    <type>int</type>
    <full_lhs>my_param</full_lhs>
    <full_lhs_value>2</full_lhs_value>
    <value>2</value>
    <value_expression>
      <integer binary="00000000000000000000000000000010" c_type="int" width="32">2</integer>
    </value_expression>
  </assignment>
  <function_return step_nr="28" thread="0">
    <function display_name="my_function" identifier="c::my_function">
      <location file="functionWithParameters.c" line="3"/>
    </function>
    <location file="functionWithParameters.c" function="my_function" line="5"/>
  </function_return>
  <location-only step_nr="29" thread="0">
    <location file="functionWithParameters.c" function="main" line="10"/>
  </location-only>
  <failure property="main.assertion.1" reason="assertion 0" step_nr="30" thread="0">
    <location file="functionWithParameters.c" function="main" line="10"/>
  </failure>
</goto_trace>

<message type="STATUS-MESSAGE">
  <text>VERIFICATION FAILED</text>
</message>

<cprover-status>FAILURE</cprover-status>

</cprover>
